// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpc_message.proto

#include <board_platformer/detail/rpc_message.pb.h>
#include <board_platformer/detail/rpc_message.grpc.pb.h>

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>

static const char* board_platformer_comm_method_names[] = {
  "/board_platformer_comm/send_board_state",
};

std::unique_ptr< board_platformer_comm::Stub> board_platformer_comm::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< board_platformer_comm::Stub> stub(new board_platformer_comm::Stub(channel));
  return stub;
}

board_platformer_comm::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_send_board_state_(board_platformer_comm_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status board_platformer_comm::Stub::send_board_state(::grpc::ClientContext* context, const ::board_state& request, ::player_move* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_send_board_state_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::player_move>* board_platformer_comm::Stub::Asyncsend_board_stateRaw(::grpc::ClientContext* context, const ::board_state& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::player_move>::Create(channel_.get(), cq, rpcmethod_send_board_state_, context, request);
}

board_platformer_comm::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      board_platformer_comm_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< board_platformer_comm::Service, ::board_state, ::player_move>(
          std::mem_fn(&board_platformer_comm::Service::send_board_state), this)));
}

board_platformer_comm::Service::~Service() {
}

::grpc::Status board_platformer_comm::Service::send_board_state(::grpc::ServerContext* context, const ::board_state* request, ::player_move* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


